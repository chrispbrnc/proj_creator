import osimport sysimport cPickle as picklefrom PyQt4 import QtCore, QtGuifrom design import Ui_MainWindowfrom addmaster import Ui_AddMasterDialogfrom supcreator.src.xmlutil import xmlUtilfrom supcreator.src.pickleutil import PickleUtilfrom supcreator.src.projinfo import ProjectInfofrom supcreator.src.fileutil import FileUtilfrom supcreator.src.checker import Checkerfrom supcreator.src.privatize import Privatizeclass AddMasterUi(QtGui.QDialog, Ui_AddMasterDialog, PickleUtil):    def __init__(self, parent=None):        super(AddMasterUi, self).__init__(parent)        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)        self.setupUi(self)        self.username = os.path.expanduser('~').split('/')[2]        self.key = None        self.area = None        self.line = None        self.master_dict = None        self.data_base = os.path.expanduser('/mnt/gz4/home/supProjectCreator_data')        self.master_flows = os.path.join(self.data_base, 'masters',                                        self.username, 'master_flows.xml')        self.master_global = os.path.join(self.data_base, 'masters',                                        'global', 'master_flows.xml')        self.pickle_jar = os.path.join(self.data_base, 'pickles',                                        self.username, 'pickle_jar')        self.update_ecb_status = None        self.pk = PickleUtil(self.master_flows, self.pickle_jar)        self.pk.master_list_for_combobox()    def new_master(self):        # TODO: add a check if the master exists then do nothing        self.key = str(self.le_key.text())        self.area = str(self.le_area.text())        self.line = str(self.le_line.text())        xu = xmlUtil()        xu.xml_tree(self.master_global, self.master_flows)        xu.read_xml_to_dict()        self.master_dict = xu.master_dict        if self.checking() == 'go':            xu.get_user()            xu.add_master_xml(self.key, self.area, self.line)            xu.write_xml(self.master_flows)            self.update_pickle()        else:            pass    def checking(self):        val0 = self.area + ' - ' + self.line        cb_items = self.pk.cb_items        # check if key already exists        if self.key in self.master_dict.keys():            key_exists = 'This key already exists. Please choose another one!'            reply = QtGui.QMessageBox.question(self, 'Error', key_exists,                QtGui.QMessageBox.Ok)            status = 'nogo'        elif any(val0 in x for x in cb_items):            master_exists = 'This master flow already exists. No need to create it again, just look up the key!'            reply = QtGui.QMessageBox.question(self, 'Error', master_exists,                QtGui.QMessageBox.Ok)            status = 'nogo'        else:            status = 'go'        return status    def update_pickle(self):        self.pk = PickleUtil(self.master_flows, self.pickle_jar)        self.pk.master_list_for_combobox()        self.pk.pickle_dump()class ProgramUi(QtGui.QMainWindow, Ui_MainWindow, FileUtil,                ProjectInfo, Privatize):    def __init__(self, parent=None):        super(ProgramUi, self).__init__(parent)        self.ui = Ui_MainWindow()        self.ui.setupUi(self)        self.username = os.path.expanduser('~').split('/')[2]        self.data_base = os.path.expanduser('/mnt/gz4/home/supProjectCreator_data')        self.pickle_jar = os.path.join(self.data_base, 'pickles',                                        self.username, 'pickle_jar')        with open(self.pickle_jar, 'rb') as f:            self.cb = sorted(pickle.load(f))            self.master_dict = pickle.load(f)        ui.ecb_master_flow.clear()        ui.ecb_master_flow.addItems(self.cb)        self.uid = None        self.job_num = None        self.line_num = None        self.area = None        self.master = None        self.master_key = None        self.master_path = None        self.mnt_base = '/mnt/gz4/seisup-beta2d/usr'        self.d1_base = '/d1/gc/jobs'        self.area_path = None        self.pji = ProjectInfo()        self.d1_path = None        self.mnt_path = None        self.user_mnt_home = '/mnt/gz4' + os.path.expanduser('~')        self.pji = ProjectInfo()        self.d_master_key = None        self.d_master_area = None        self.d_master_line = None        self.line_info_xml = None        self.area_DB_status = None        ui.pb_create_project.clicked.connect(self.get_info)        ui.pb_addMaster.clicked.connect(self.add_master_show)        ui.googKMZ.clicked.connect(self.google)        ui.flatIrons.clicked.connect(self.flat)    def google(self):    #     Method to open GoogleEarth when pushbutton clicked by user on    #     second tab.  Dont want to add glob.glob to this script    # Input: self.d1_path    # Output: N/A; opens google earth        self.job_num = str(ui.le_job_num.text())        self.line_num = str(ui.le_line_num.text())        self.area = str(self.job_num.split('-')[0])        self.project_paths()        fu = FileUtil(job_num=self.job_num, line_name=self.line_num,            area=self.area, src_path=self.d1_path, target_path=self.mnt_path,            target_home=self.user_mnt_home, master=self.master_path)        fu.openKMZ()    def flat(self):        fu = FileUtil(job_num=self.job_num, line_name=self.line_num,            area=self.area, src_path=self.d1_path, target_path=self.mnt_path,            target_home=self.user_mnt_home, master=self.master_path)        fu.flatIrons()    def get_info(self):        #self.uid = str(ui.le_uid.text())  removed dependency on uid        self.job_num = str(ui.le_job_num.text())        self.line_num = str(ui.le_line_num.text())        self.area = str(self.job_num.split('-')[0])        self.master = str(ui.ecb_master_flow.currentText())        self.master_key = self.master.split(':')[0]        self.master_path = str(self.master_dict.get(self.master_key)[1])        # define the d1_path and mnt_path for the project being created        self.project_paths()        status = self.checking()        if status == 'go':            # now run the backend            self.execute_fileutil()        else:            pass    def add_master_show(self):        dialog = AddMasterUi(self)        dialog.accepted.connect(dialog.new_master)        if dialog.exec_() == QtGui.QDialog.Accepted:            self.update_ecb_items()    def reload_pickle(self):        """Method to load the pickle jar to get the combobox and master        flow items.        """        with open(self.pickle_jar, 'rb') as f:            self.cb = sorted(pickle.load(f))            self.master_dict = pickle.load(f)    def update_ecb_items(self):        """Method to apdate/add items to the master flow combobox        """        self.reload_pickle()        ui.ecb_master_flow.clear()        ui.ecb_master_flow.addItems(self.cb)    def checking(self):        """check that info was entered correctly.        input: self - instance of ProgramUi        output: returns status = 'go' if everything checks out        """        chk = Checker(self.pji)        if not chk.d1_check_path():            if not chk.d1_check_area(self.d1_base):                wrong_area = 'This area does not exist in the /d1 partition. \                    Please re-enter the Job #. '                reply = QtGui.QMessageBox.question(self, 'Error', wrong_area,                    QtGui.QMessageBox.Ok)            elif not chk.d1_check_job_num(self.d1_base):                wrong_job_num =  'The Job # you entered does not exist in the \                    \d1 partition.  Please re-enter the Job#. '                reply = QtGui.QMessageBox.question(self, 'Error', wrong_job_num,                    QtGui.QMessageBox.Ok)            elif not chk.d1_check_line_num(self.d1_base):                wrong_line =  'The Line Name you entered does not exist in the \                    \d1 partition.  Please re-enter the Job#. '                reply = QtGui.QMessageBox.question(self, 'Error', wrong_line,                    QtGui.QMessageBox.Ok)        elif not chk.mnt_check_area(self.mnt_base):            self.area_DB_status = 'DNE'            status = 'go'        elif chk.mnt_check_line_name():            sup_line_exists =  "This line already exists in SeisUp! "            reply = QtGui.QMessageBox.question(self, 'Error', sup_line_exists,                QtGui.QMessageBox.Ok)        else:            status = 'go'        return status    def project_paths(self):        #pji = ProjectInfo()        self.pji.area = self.area        self.pji.line_num = self.line_num        self.pji.job_num = self.job_num        #pji.uid = self.uid removed dependency on uid        self.pji.mnt_project_path(os.path.expanduser(self.mnt_base))        self.pji.d1_project_path(os.path.expanduser(self.d1_base))        self.mnt_path = self.pji.mnt_path        self.d1_path = self.pji.d1_path        self.area_path = os.path.join(self.mnt_base, self.area)        self.line_info_xml = os.path.join(self.d1_path, 'LineInfo.xml')    def execute_fileutil(self):        fu = FileUtil(job_num=self.job_num, line_name=self.line_num,            area=self.area, src_path=self.d1_path, target_path=self.mnt_path,            target_home=self.user_mnt_home, master=self.master_path)        fu.create_new_project()        if self.area_DB_status == 'DNE':            fu.copy_area_DB(self.area_path, self.line_info_xml)            new_area_msg = "New area created in SeisUp. To access, just type \            area number into SeisUp's 'Open a Line' dialog; otherwise, the area \            will not show up until you relaunch SeisUp."            reply = QtGui.QMessageBox.question(self, 'Error', new_area_msg,                QtGui.QMessageBox.Ok)        # find the field_qc files        field_qc_files, n_field_qc_files = fu.find_files('field_qc')        if n_field_qc_files > 1:            n_files_msg = 'This may be a Master/Slave line, more than 1 .sgy \            file was linked to this project.  All files are being read in by \            one disk; the READ for the HDRDUMP and DISPLAY needs to be \            Read Sequential. If the data needs to be split, one option \            is to SELECT by TLSN. '            reply = QtGui.QMessageBox.question(self, 'Error', n_files_msg,                QtGui.QMessageBox.Ok)        # link field_qc to field.SEGY in new project        target_segy = os.path.join(self.mnt_path, 'field.SEGY')        target_dsk = os.path.join(self.mnt_path, 'field.SEGY.dsk')        fu.link_fieldsegy_to_fieldqc(n_files=n_field_qc_files, src_files=field_qc_files,            target_segy=target_segy, target_dsk=target_dsk)        # copy station files to users mnt home dir        fu.station_to_home()        complete_msg = 'Project Created!'        reply = QtGui.QMessageBox.question(self, 'Error', complete_msg,            QtGui.QMessageBox.Ok)if __name__ == '__main__':    pr = Privatize()    pr.public_master_to_private()    pr.public_pickle_to_private()    app = QtGui.QApplication(sys.argv)    MainWindow = QtGui.QMainWindow()    ui = Ui_MainWindow()    ui.setupUi(MainWindow)    pui = ProgramUi()    MainWindow.show()    sys.exit(app.exec_())